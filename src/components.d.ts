/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface RadicalItemSliding {
    /**
    * Close the sliding item. Items can also be closed from the the parent `ion-list`.
    */
    'close': () => Promise<void>;
    /**
    * Close all of the sliding items in the list. Items can also be closed from the parent `ion-list`.
    */
    'closeOpened': () => Promise<boolean>;
    /**
    * If `true`, the user cannot interact with the sliding-item.
    */
    'disabled': boolean;
    /**
    * Get the amount the item is open in pixels.
    */
    'getOpenAmount': () => Promise<number>;
    /**
    * Get the ratio of the open amount of the item compared to the width of the options. If the number returned is positive, then the options on the right side are open. If the number returned is negative, then the options on the left side are open. If the absolute value of the number is greater than 1, the item is open more than the width of the options.
    */
    'getSlidingRatio': () => Promise<number>;
  }
}

declare global {


  interface HTMLRadicalItemSlidingElement extends Components.RadicalItemSliding, HTMLStencilElement {}
  var HTMLRadicalItemSlidingElement: {
    prototype: HTMLRadicalItemSlidingElement;
    new (): HTMLRadicalItemSlidingElement;
  };
  interface HTMLElementTagNameMap {
    'radical-item-sliding': HTMLRadicalItemSlidingElement;
  }
}

declare namespace LocalJSX {
  interface RadicalItemSliding extends JSXBase.HTMLAttributes<HTMLRadicalItemSlidingElement> {
    /**
    * If `true`, the user cannot interact with the sliding-item.
    */
    'disabled'?: boolean;
    /**
    * Emitted when the sliding position changes.
    */
    'onIonDrag'?: (event: CustomEvent<any>) => void;
  }

  interface IntrinsicElements {
    'radical-item-sliding': RadicalItemSliding;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


